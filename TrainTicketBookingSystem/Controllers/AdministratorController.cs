using TrainTicketBookingSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using Microsoft.Owin.Security;
using Microsoft.AspNet.Identity.Owin;
using System.Threading.Tasks;
using Microsoft.AspNet.Identity.EntityFramework;
using TrainTicketBookingSystem;

namespace TrainTicketBookingSystem.Controllers
{
	[Authorize(Roles="Admin")]
	[OverrideAuthentication]
	public class AdministratorController : Controller
	{
		//private readonly 
		private ApplicationUserManager userManager;
		private ApplicationRoleManager roleManager;

		private void AddErrors(IdentityResult result)
		{
			foreach (var error in result.Errors)
			{
				ModelState.AddModelError("", error);
			}
		}

		public ApplicationUserManager UserManager
		{
			get
			{
				return userManager ?? HttpContext.GetOwinContext().Get<ApplicationUserManager>();
			}
			private set
			{
				userManager = value;
			}
		}

		public ApplicationRoleManager RoleManager
		{
			get
			{
				return roleManager ?? HttpContext.GetOwinContext().Get<ApplicationRoleManager>();
			}
			private set
			{
				roleManager = value;
			}
		}

		[HttpGet]
		public ActionResult CreateUser()
		{

			var roles = RoleManager.Roles
			.Select(x => new SelectListItem { Text = x.Name, Value = x.Name }).ToList();

			var model = new CreateUserViewModel
			{
				RolesOptions = roles
			};

			return View(model);
		}

		[HttpPost]
		[ValidateAntiForgeryToken]
		public async Task<ActionResult> CreateUser(CreateUserViewModel model)
		{
			model.RolesOptions = RoleManager.Roles
											.Select(x => new SelectListItem { Text = x.Name, Value = x.Name })
											.ToList();

			if (ModelState.IsValid)
			{
				
				var user = new ApplicationUser
				{
					UserName = model.UserName,
					Email = model.Email,
					FirstName = model.FirstName,
					LastName = model.LastName
				};

				var autoGeneratedPassword = Guid.NewGuid().ToString().Replace('-', 'a');
				var userCreationResult = await UserManager.CreateAsync(user, autoGeneratedPassword);
				
				if (userCreationResult.Succeeded)
				{
					var roleResult = await UserManager.AddToRoleAsync(user.Id, model.SelectedRole);
					if (roleResult.Succeeded) 
					{
						// user was successfully created and added to the
						// coresponding role, now is time to notify him
						// about his account being created by the administrator
						string emailConfirmCode = await UserManager.GenerateEmailConfirmationTokenAsync(user.Id);
						string passwordResetCode = await UserManager.GeneratePasswordResetTokenAsync(user.Id);

						string confirmEmailUrl = Url.Action("ConfirmEmail", "Account", new { userId = user.Id, code = emailConfirmCode }, protocol: Request.Url.Scheme);
						string resetPasswordUrl = Url.Action("ResetPassword", "Account", new { userId = user.Id, code = passwordResetCode }, protocol: Request.Url.Scheme); 

						await UserManager.SendEmailAsync(user.Id, "Confirm your account",
							String.Format("Hello, {0}, an account has been created for you.<p>User name: {1}</p> <p>Password: {2}</p> <p>Click <a href=\"{3}\">here</a> to confirm your email.</p><p>It is highly recommended to change your password as soon as you see this email. Click <a href=\"{4}\">here</a> to do so now.",
										model.FirstName, model.UserName, autoGeneratedPassword, confirmEmailUrl, resetPasswordUrl));

						ViewBag.UserCreatedSuccessfullyMessage = "The user was created successfully. They will be sent an email which contains their login information.";
						return View(new CreateUserViewModel { RolesOptions = model.RolesOptions });					
					}
					else
					{
						// e.g. if role doesn't exist
						AddErrors(roleResult);
					}
				}
				else
				{
					// e.g. if username or email are already taken - display the errors
					AddErrors(userCreationResult);
				}
			}

			return View(model);
		}

		[HttpGet]
		public ActionResult AddRole()
		{
			var model = new AddRoleViewModel
			{
				CurrentRoles = RoleManager.Roles.Select(r => r.Name).AsParallel().ToList()
			};
			
			return View(model);
		}

		[HttpPost]
		[ValidateAntiForgeryToken]
		public ActionResult AddRole(AddRoleViewModel model)
		{
			model.CurrentRoles = RoleManager.Roles.Select(r => r.Name).AsParallel().ToList();

			if (ModelState.IsValid)
			{
				var newRole = RoleManager.FindByName(model.Name);

				if (newRole != null)
				{
					ModelState.AddModelError("Name", "A role with the same name already exists");
				}

				else
				{
					var result = RoleManager.Create(new IdentityRole(model.Name));
					if (result.Succeeded)
					{
						// if everything is fine
						return RedirectToAction("AddRole");
					}
					ModelState.AddModelError("Name", result.Errors.ToString());
				}
			}

			// display the errors
			return View(model);
		}
	}
}